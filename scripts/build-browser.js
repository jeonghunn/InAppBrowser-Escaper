#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Builds a browser-compatible IIFE version from the TypeScript UMD output
 * This ensures the library is properly exposed as window.InAppBrowserEscaper
 */

const DIST_BROWSER_DIR = path.join(__dirname, '..', 'dist', 'browser');
const INPUT_FILE = path.join(DIST_BROWSER_DIR, 'index.js');
const OUTPUT_FILE = path.join(DIST_BROWSER_DIR, 'inappbrowserescaper.js');

function buildBrowserVersion() {
  console.log('üîß Building browser-compatible version...');
  
  // Read the UMD compiled output
  if (!fs.existsSync(INPUT_FILE)) {
    console.error(`‚ùå Input file not found: ${INPUT_FILE}`);
    console.error('Please run "npm run build:browser" first');
    process.exit(1);
  }
  
  const umdContent = fs.readFileSync(INPUT_FILE, 'utf8');
  
  // Create browser-compatible IIFE wrapper
  const browserContent = `/**
 * InAppBrowserEscaper - Browser Compatible Version
 * A TypeScript library to help users escape from in-app browsers
 * 
 * This file is automatically generated from TypeScript source.
 * Do not edit this file directly. Edit src/index.ts instead.
 */

// IIFE wrapper for browser compatibility
(function(global) {
  'use strict';

  // Create a module-like environment for the UMD code
  var module = { exports: {} };
  var exports = module.exports;
  
  // Define a dummy require function
  function require() {
    return {};
  }
  
  // Define a dummy define function for AMD
  function define() {}
  define.amd = true;

  // Execute the UMD module code
  ${umdContent.replace('(function (factory) {', '(function (factory) {')}
  
  // Extract the exports and expose them globally
  const InAppBrowserDetector = module.exports.InAppBrowserDetector || exports.InAppBrowserDetector;
  const InAppBrowserEscaper = module.exports.InAppBrowserEscaper || exports.InAppBrowserEscaper;
  const defaultExport = module.exports.default || exports.default;
  
  // Expose to global scope
  global.InAppBrowserEscaper = {
    InAppBrowserDetector: InAppBrowserDetector,
    InAppBrowserEscaper: InAppBrowserEscaper,
    default: defaultExport || InAppBrowserEscaper
  };

})(typeof window !== "undefined" ? window : this);
`;

  // Write the browser-compatible version
  fs.writeFileSync(OUTPUT_FILE, browserContent, 'utf8');
  
  console.log(`‚úÖ Browser version created: ${OUTPUT_FILE}`);
  console.log('üåê The library is now available as window.InAppBrowserEscaper');
}

// Run the build
try {
  buildBrowserVersion();
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
}